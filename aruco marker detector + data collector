import cv2
import pandas as pd

# Choose a specific dictionary of ArUco markers
desired_aruco_dictionary = "DICT_4X4_50"

# The different ArUco dictionaries built into the OpenCV library.
ARUCO_DICT = {
    "DICT_4X4_50": cv2.aruco.DICT_4X4_50,
    "DICT_4X4_100": cv2.aruco.DICT_4X4_100,
    "DICT_4X4_250": cv2.aruco.DICT_4X4_250,
    "DICT_4X4_1000": cv2.aruco.DICT_4X4_1000,
    "DICT_5X5_50": cv2.aruco.DICT_5X5_50,
    "DICT_5X5_100": cv2.aruco.DICT_5X5_100,
    "DICT_5X5_250": cv2.aruco.DICT_5X5_250,
    "DICT_5X5_1000": cv2.aruco.DICT_5X5_1000,
    "DICT_6X6_50": cv2.aruco.DICT_6X6_50,
    "DICT_6X6_100": cv2.aruco.DICT_6X6_100,
    "DICT_6X6_250": cv2.aruco.DICT_6X6_250,
    "DICT_6X6_1000": cv2.aruco.DICT_6X6_1000,
    "DICT_7X7_50": cv2.aruco.DICT_7X7_50,
    "DICT_7X7_100": cv2.aruco.DICT_7X7_100,
    "DICT_7X7_250": cv2.aruco.DICT_7X7_250,
    "DICT_7X7_1000": cv2.aruco.DICT_7X7_1000,
    "DICT_ARUCO_ORIGINAL": cv2.aruco.DICT_ARUCO_ORIGINAL
}

def main():
    """
    Main method of the program, which detects and records info from ArUco markers.
    """
    # Create a dictionary with the center positions of the grid
    grid_position_dict = {
        0: (167, 185),
        1:	(229, 183),
        2:	(290, 180),
        3:	(351, 177),
        4:	(170, 250),
        5:	(232, 247),
        6:	(293, 244),
        7:	(354, 242),
        8:	(174, 315),
        9:	(235, 312),
        10:	(296, 309),
        11:	(357, 306),
        12:	(177, 379),
        13:	(238, 376),
        14:	(299, 373),
        15:	(360, 370)
        }

    # Check that we have a valid ArUco marker dictionary.
    if ARUCO_DICT.get(desired_aruco_dictionary, None) is None:
        print("[INFO] The ArUCo tag of '{}' is not supported".format(desired_aruco_dictionary))
        cv2.sys.exit(0)

    # Load the ArUco dictionary
    print("[INFO] Currently detecting '{}' markers...".format(desired_aruco_dictionary))
    this_aruco_dictionary = cv2.aruco.getPredefinedDictionary(ARUCO_DICT[desired_aruco_dictionary])
    this_aruco_parameters = cv2.aruco.DetectorParameters()

    # Start the video stream
    cap = cv2.VideoCapture(0)

    while(True):
        # Capture frame-by-frame
        ret, frame = cap.read()

        # Detect ArUco markers in the video frame
        (corners, ids, rejected) = cv2.aruco.detectMarkers(
            frame, this_aruco_dictionary, parameters=this_aruco_parameters)

        # Check that at least one ArUco marker was detected
        if ids is not None:
            # Flatten the ArUco IDs list
            ids = ids.flatten()

            # Initialize a list to track (Marker ID, Coordinate)
            detected = []

            # Loop over the detected ArUco corners
            for (marker_corner, marker_id) in zip(corners, ids):
                # Extract the marker corners
                corners = marker_corner.reshape((4, 2))
                (top_left, top_right, bottom_right, bottom_left) = corners

                # Convert the (x,y) coordinate pairs to integers
                top_right = (int(top_right[0]), int(top_right[1]))
                bottom_right = (int(bottom_right[0]), int(bottom_right[1]))
                bottom_left = (int(bottom_left[0]), int(bottom_left[1]))
                top_left = (int(top_left[0]), int(top_left[1]))

                # Draw the bounding box of the ArUco detection
                cv2.line(frame, top_left, top_right, (0, 255, 0), 2)
                cv2.line(frame, top_right, bottom_right, (0, 255, 0), 2)
                cv2.line(frame, bottom_right, bottom_left, (0, 255, 0), 2)
                cv2.line(frame, bottom_left, top_left, (0, 255, 0), 2)

                # Calculate and draw the center of the ArUco marker
                center_x = int((top_left[0] + bottom_right[0]) / 2.0)
                center_y = int((top_left[1] + bottom_right[1]) / 2.0)
                cv2.circle(frame, (center_x, center_y), 4, (0, 0, 255), -1)

                # Record the ArUco marker and position coordinate
                detected.append(( marker_id, (center_x,center_y) ))

                # Draw the ArUco marker ID on the video frame
                # The ID is always located at the top_left of the ArUco marker
                cv2.putText(frame, str(marker_id),
                            (top_left[0], top_left[1] - 15),
                            cv2.FONT_HERSHEY_SIMPLEX,
                            0.5, (0, 255, 0), 2)

        # Uncomment to see what is being detected
        # print(f"Detected: {detected}")

        # Display the resulting frame
        cv2.imshow('frame', frame)

        # Go through detected and create new lists which are sorted to correspond to the grid
        sorted_markers = []
        sorted_positions = []

        # Leeway is how many pixels away from the center coordiate a point can be
        leeway = 20

        # Each v1 is a tuple (x, y) of the correct center position
        for k1, v1 in list(grid_position_dict.items()):
            found_flag = False
            lower_bound = (v1[0] - leeway, v1[1] - leeway)
            upper_bound = (v1[0] + leeway, v1[1] + leeway)

            # Go through our detected data and see if any of the center positions match
            for elem in detected: #elem is, for example, ( 1, (x,y) )
                k2 = elem[0] # ArUco marker ID
                v2 = elem[1] # Position coordinate
                # If the center position is in range, add the marker ID and the sorted position
                if lower_bound[0] <= v2[0] <= upper_bound[0] and lower_bound[1] <= v2[1] <= upper_bound[1]:
                    sorted_markers.append(k2)
                    sorted_positions.append(v2)
                    found_flag = True
                    break

            # If position is not in range, then append to the marker ID 'None', position 'None'
            if found_flag == False:
                sorted_markers.append('None')
                sorted_positions.append('None')

        # These two for loops should give us sorted_markers and sorted_positions list
        # where everything is in the correct order  as seen in the grid

        # To turn a dictionary into a dataframe, we need it in this format:
        # Marker ID: [list]
        # Position: [list]
        data = {
            'Marker ID': sorted_markers,
            'Position': sorted_positions
        }

        # Display the data dictionary as a dataframe
        df = pd.DataFrame(data)
        print(df)

        # If "q" is pressed on the keyboard, exit this loop
        if cv2.waitKey(5000) & 0xFF == ord('q'):
            break

    # Close down the video stream
    cap.release()
    cv2.destroyAllWindows()

if __name__ == '__main__':
    main()
